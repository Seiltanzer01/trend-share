"""Добавлены поля real_price и deviation в модель UserPrediction

Revision ID: 98dee8cb0a0e
Revises: 872ec64f4402
Create Date: 2024-12-18 21:49:30.816300

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '98dee8cb0a0e'
down_revision = '872ec64f4402'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trade_criteria')
    op.drop_table('user')
    op.drop_table('login_token')
    op.drop_table('instrument')
    op.drop_table('instrument_category')
    op.drop_table('price_history')
    op.drop_table('criterion')
    op.drop_table('best_setup_vote')
    op.drop_table('user_prediction')
    op.drop_table('poll')
    op.drop_table('setup_criteria')
    op.drop_table('criterion_subcategory')
    op.drop_table('config')
    op.drop_table('trade')
    op.drop_table('poll_instrument')
    op.drop_table('setup')
    op.drop_table('criterion_category')
    op.drop_table('best_setup_candidate')
    op.drop_table('best_setup_poll')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('best_setup_poll',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='best_setup_poll_pkey')
    )
    op.create_table('best_setup_candidate',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('best_setup_candidate_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('setup_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_trades', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('win_rate', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['setup_id'], ['setup.id'], name='best_setup_candidate_setup_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='best_setup_candidate_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='best_setup_candidate_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('criterion_category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('criterion_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='criterion_category_pkey'),
    sa.UniqueConstraint('name', name='criterion_category_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('setup',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('setup_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('setup_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('screenshot', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='setup_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='setup_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('poll_instrument',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('poll_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('instrument_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], name='poll_instrument_instrument_id_fkey'),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], name='poll_instrument_poll_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='poll_instrument_pkey')
    )
    op.create_table('trade',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('trade_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('instrument_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('direction', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('entry_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('exit_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trade_open_time', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('trade_close_time', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('setup_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('screenshot', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('profit_loss', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profit_loss_percentage', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], name='trade_instrument_id_fkey'),
    sa.ForeignKeyConstraint(['setup_id'], ['setup.id'], name='trade_setup_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='trade_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='trade_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('config',
    sa.Column('key', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=50), autoincrement=False, nullable=False)
    )
    op.create_table('criterion_subcategory',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('criterion_subcategory_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['criterion_category.id'], name='criterion_subcategory_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='criterion_subcategory_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('setup_criteria',
    sa.Column('setup_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('criterion_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['criterion_id'], ['criterion.id'], name='setup_criteria_criterion_id_fkey'),
    sa.ForeignKeyConstraint(['setup_id'], ['setup.id'], name='setup_criteria_setup_id_fkey'),
    sa.PrimaryKeyConstraint('setup_id', 'criterion_id', name='setup_criteria_pkey')
    )
    op.create_table('poll',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('poll_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('real_prices', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='poll_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_prediction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('poll_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('instrument_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('predicted_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('deviation', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('real_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], name='user_prediction_instrument_id_fkey'),
    sa.ForeignKeyConstraint(['poll_id'], ['poll.id'], name='user_prediction_poll_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_prediction_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_prediction_pkey'),
    sa.UniqueConstraint('user_id', 'poll_id', 'instrument_id', name='unique_user_poll_instrument')
    )
    op.create_table('best_setup_vote',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('voter_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['best_setup_candidate.id'], name='best_setup_vote_candidate_id_fkey'),
    sa.ForeignKeyConstraint(['voter_user_id'], ['user.id'], name='best_setup_vote_voter_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='best_setup_vote_pkey')
    )
    op.create_table('criterion',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('criterion_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subcategory_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['subcategory_id'], ['criterion_subcategory.id'], name='criterion_subcategory_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='criterion_pkey'),
    sa.UniqueConstraint('name', name='criterion_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('price_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('instrument_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('open', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('high', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('low', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('close', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('volume', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], name='price_history_instrument_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='price_history_pkey'),
    sa.UniqueConstraint('instrument_id', 'date', name='_instrument_date_uc')
    )
    op.create_table('instrument_category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('instrument_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='instrument_category_pkey'),
    sa.UniqueConstraint('name', name='instrument_category_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('instrument',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('instrument_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['instrument_category.id'], name='instrument_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='instrument_pkey'),
    sa.UniqueConstraint('name', name='instrument_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('login_token',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('telegram_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['telegram_id'], ['user.telegram_id'], name='login_token_telegram_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='login_token_pkey'),
    sa.UniqueConstraint('token', name='login_token_token_key')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('telegram_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=80), autoincrement=False, nullable=True),
    sa.Column('auth_token', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('auth_token_creation_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('registered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('assistant_premium', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('wallet_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('auth_token', name='user_auth_token_key'),
    sa.UniqueConstraint('telegram_id', name='user_telegram_id_key'),
    sa.UniqueConstraint('username', name='user_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('trade_criteria',
    sa.Column('trade_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('criterion_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['criterion_id'], ['criterion.id'], name='trade_criteria_criterion_id_fkey'),
    sa.ForeignKeyConstraint(['trade_id'], ['trade.id'], name='trade_criteria_trade_id_fkey'),
    sa.PrimaryKeyConstraint('trade_id', 'criterion_id', name='trade_criteria_pkey')
    )
    # ### end Alembic commands ###
